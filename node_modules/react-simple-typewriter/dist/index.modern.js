import React, { memo, useState, useCallback, useEffect } from 'react';

var styles = {"blinkingCursor":"_288eE","blink":"_dHnpo"};

var Typewriter = function Typewriter(_ref) {
  var words = _ref.words,
      _ref$loop = _ref.loop,
      loop = _ref$loop === void 0 ? false : _ref$loop,
      _ref$cursor = _ref.cursor,
      cursor = _ref$cursor === void 0 ? false : _ref$cursor,
      _ref$cursorStyle = _ref.cursorStyle,
      cursorStyle = _ref$cursorStyle === void 0 ? '|' : _ref$cursorStyle,
      _ref$typeSpeed = _ref.typeSpeed,
      typeSpeed = _ref$typeSpeed === void 0 ? 100 : _ref$typeSpeed,
      _ref$delaySpeed = _ref.delaySpeed,
      delaySpeed = _ref$delaySpeed === void 0 ? 1500 : _ref$delaySpeed,
      _ref$deleteSpeed = _ref.deleteSpeed,
      deleteSpeed = _ref$deleteSpeed === void 0 ? 50 : _ref$deleteSpeed;

  var _useState = useState(typeSpeed),
      speed = _useState[0],
      setSpeed = _useState[1];

  var _useState2 = useState(''),
      text = _useState2[0],
      setText = _useState2[1];

  var _useState3 = useState(false),
      isDeleting = _useState3[0],
      setDeleting = _useState3[1];

  var _useState4 = useState(0),
      counter = _useState4[0],
      setCounter = _useState4[1];

  var handleTyping = useCallback(function () {
    var index = loop ? counter % words.length : counter;
    var word = words[index];
    setSpeed(typeSpeed);

    if (isDeleting) {
      setSpeed(deleteSpeed);
      setText(function (prev) {
        return word.substring(0, prev.length - 1);
      });
    } else {
      setText(function (prev) {
        return word.substring(0, prev.length + 1);
      });
    }

    if (!isDeleting && text === word) {
      if (!loop && counter >= words.length - 1) return;
      setDeleting(true);
      setSpeed(delaySpeed);
    } else if (isDeleting && text === '') {
      setDeleting(false);
      setCounter(function (prev) {
        return prev + 1;
      });
    }
  }, [delaySpeed, isDeleting, counter, deleteSpeed, loop, text, typeSpeed, words]);
  useEffect(function () {
    var timer = setTimeout(function () {
      return handleTyping();
    }, speed);
    return function () {
      return clearTimeout(timer);
    };
  }, [handleTyping, speed]);
  return React.createElement(React.Fragment, null, React.createElement("span", null, text), cursor && React.createElement("span", {
    className: styles.blinkingCursor
  }, cursorStyle));
};

var index = memo(Typewriter);

export default index;
//# sourceMappingURL=index.modern.js.map
