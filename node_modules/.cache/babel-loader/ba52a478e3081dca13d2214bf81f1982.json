{"ast":null,"code":"var _jsxFileName = \"/Users/hipheckt/codes/sapio/src/Login.js\";\nimport React, { Component } from \"react\";\nimport { Field, reduxForm, reset, change, untouch } from \"redux-form\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport * as qs from \"query-string\";\nimport { actionLogin } from \"./common/redux/actions/\";\nimport RenderField from \"./common/helpers/RenderField\";\nimport Validation from \"./common/helpers/Validation\";\nimport { setLocalStorage, removeLocalStorage, getLocalStorage } from \"./common/helpers/Utils\";\nimport sapioApiService from \"./common/api/ApiService\";\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setLoginData = () => {\n      if (getLocalStorage(\"remember\")) {\n        let loginInfo = getLocalStorage(\"remember\");\n        this.props.initialize({\n          email: loginInfo.email,\n          password: loginInfo.password,\n          rememberme: true\n        });\n      }\n    };\n\n    this.handleSubmit = formValues => {\n      let data = formValues;\n\n      const _this = this;\n\n      _this.setState({\n        loader: true\n      });\n\n      this.props.actionLogin(data).then(result => {\n        if (result && result.data && result.data.success === \"true\") {\n          setLocalStorage(\"userInfo\", result.data.data);\n\n          _this.setState({\n            loader: false\n          });\n\n          if (data.rememberme === true) {\n            let loginInfo = {\n              email: data.email,\n              password: data.password\n            };\n            setLocalStorage(\"remember\", loginInfo);\n          } else {\n            removeLocalStorage(\"remember\");\n            this.props.history.push(\"/\");\n          }\n        } else {\n          _this.setState({\n            loader: false\n          });\n\n          this.props.dispatch(change(\"loginForm\", \"password\", \"\"));\n          this.props.dispatch(untouch(\"loginForm\", \"password\", \"\"));\n        }\n      }).catch(error => {\n        _this.setState({\n          loader: false\n        });\n\n        console.log(error);\n      });\n    };\n\n    this.state = {\n      termschecked: \"0\",\n      loader: false\n    };\n  }\n\n  componentDidMount() {\n    document.title = \"Log In\";\n    this.props.dispatch(reset(\"loginForm\"));\n    this.setLoginData();\n    const {\n      location\n    } = this.props;\n  } // if remember checkbox is checked\n\n\n  render() {\n    const {\n      handleSubmit,\n      submitting\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"section\", {\n      id: \"bg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nconst mapStateToProps = state => {\n  //console.log(state);\n  const {\n    userData\n  } = state.user;\n  return {\n    userData\n  };\n};\n\nLogin = connect(mapStateToProps, {\n  actionLogin\n})(Login);\nexport default reduxForm({\n  form: \"loginForm\",\n  touchOnBlur: false,\n  destroyOnUnmount: true\n})(withRouter(Login));","map":{"version":3,"sources":["/Users/hipheckt/codes/sapio/src/Login.js"],"names":["React","Component","Field","reduxForm","reset","change","untouch","Link","withRouter","connect","qs","actionLogin","RenderField","Validation","setLocalStorage","removeLocalStorage","getLocalStorage","sapioApiService","Login","constructor","props","setLoginData","loginInfo","initialize","email","password","rememberme","handleSubmit","formValues","data","_this","setState","loader","then","result","success","history","push","dispatch","catch","error","console","log","state","termschecked","componentDidMount","document","title","location","render","submitting","mapStateToProps","userData","user","form","touchOnBlur","destroyOnUnmount"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Field, reduxForm, reset, change, untouch } from \"redux-form\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport * as qs from \"query-string\";\r\n\r\nimport { actionLogin } from \"./common/redux/actions/\";\r\nimport RenderField from \"./common/helpers/RenderField\";\r\nimport Validation from \"./common/helpers/Validation\";\r\nimport {\r\n  setLocalStorage,\r\n  removeLocalStorage,\r\n  getLocalStorage,\r\n} from \"./common/helpers/Utils\";\r\nimport sapioApiService from \"./common/api/ApiService\";\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      termschecked: \"0\",\r\n      loader: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.title = \"Log In\";\r\n    this.props.dispatch(reset(\"loginForm\"));\r\n    this.setLoginData();\r\n    const { location } = this.props;\r\n  \r\n  }\r\n\r\n  \r\n  // if remember checkbox is checked\r\n  setLoginData = () => {\r\n    if (getLocalStorage(\"remember\")) {\r\n      let loginInfo = getLocalStorage(\"remember\");\r\n      this.props.initialize({\r\n        email: loginInfo.email,\r\n        password: loginInfo.password,\r\n        rememberme: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleSubmit = (formValues) => {\r\n    let data = formValues;\r\n    const _this = this;\r\n    _this.setState({ loader: true });\r\n    this.props\r\n      .actionLogin(data)\r\n      .then((result) => {\r\n        if (result && result.data && result.data.success === \"true\") {\r\n          setLocalStorage(\"userInfo\", result.data.data);\r\n          _this.setState({ loader: false });\r\n          if (data.rememberme === true) {\r\n            let loginInfo = {\r\n              email: data.email,\r\n              password: data.password,\r\n            };\r\n            setLocalStorage(\"remember\", loginInfo);\r\n          } else {\r\n            removeLocalStorage(\"remember\");\r\n            this.props.history.push(\"/\");\r\n          }\r\n        } else {\r\n          _this.setState({ loader: false });\r\n          this.props.dispatch(change(\"loginForm\", \"password\", \"\"));\r\n          this.props.dispatch(untouch(\"loginForm\", \"password\", \"\"));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        _this.setState({ loader: false });\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  \r\n\r\n  render() {\r\n    const { handleSubmit, submitting } = this.props;\r\n\r\n    return (\r\n      <section id=\"bg\">\r\n        \r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  //console.log(state);\r\n  const { userData } = state.user;\r\n  return { userData };\r\n};\r\n\r\nLogin = connect(mapStateToProps, { actionLogin })(Login);\r\n\r\nexport default reduxForm({\r\n  form: \"loginForm\",\r\n  touchOnBlur: false,\r\n  destroyOnUnmount: true,\r\n})(withRouter(Login));\r\n"]},"metadata":{},"sourceType":"module"}