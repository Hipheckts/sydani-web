{"ast":null,"code":"export default {\n  emailRequired: value => value ? undefined : 'Enter email address',\n  confirmEmailRequired: value => value ? undefined : 'Enter confirm email address',\n  firstNameRequired: value => value ? undefined : 'Enter full name',\n  isEmail: value => value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ? 'Enter valid email address' : undefined,\n  messageRequired: value => value ? undefined : 'Enter Message',\n  passwordRequired: value => value ? undefined : 'Enter password',\n  addressRequired: value => value ? undefined : 'Enter address',\n  genderRequired: value => value ? undefined : 'Select gender',\n  businessSectorRequired: value => value ? undefined : 'Select business sector',\n  phoneNumberRequired: value => value ? undefined : 'Enter phone number',\n  bankNameRequired: value => value ? undefined : 'Enter bank name',\n  accountNumberRequired: value => value ? undefined : 'Enter account number',\n  cardDetailRequired: value => value ? undefined : 'Enter Card Detail',\n  oldPasswordRequired: value => value ? undefined : 'Enter old password',\n  newPasswordRequired: value => value ? undefined : 'Enter new password',\n  confirmPasswordRequired: value => value ? undefined : 'Enter confirm password',\n  passwordsMatch: (value, allValues) => value !== allValues.password ? 'Mismatch password and confirm password' : undefined,\n  emailMatch: (value, allValues) => value.toLowerCase() !== allValues.email.toLowerCase() ? 'Mismatch email and confirm email' : undefined,\n  changePasswordsMatch: (value, allValues) => value !== allValues.newpassword ? 'Mismatch new password and confirm new password' : undefined,\n  passwordsReset: (value, allValues) => value !== allValues.password ? 'Mismatch new and confirm password' : undefined,\n  minLength: (min, field) => value => value && value.length < min ? `${field} must be ${min} characters long` : undefined,\n  maxLength: max => value => value && value.length > max ? `Must be ${max} characters or less` : undefined,\n  maxLength1: (max, field) => value => value && value.length > max ? `${field} must be ${max} characters` : undefined,\n  termsRequired: value => value ? undefined : 'Select checkbox to agree to the terms and conditions to continue',\n  CVVRequired: value => value ? undefined : 'Enter CVV',\n  OTPRequired: value => value ? undefined : 'Enter OTP',\n  cardPinRequired: value => value ? undefined : 'Enter card pin',\n  cardExpiryRequired: value => value ? undefined : 'Enter card expiry',\n  cardNumberRequired: value => value ? undefined : 'Enter card number',\n  cardNameRequired: value => value ? undefined : 'Enter card holder name',\n  TFPRequired: value => value ? undefined : 'Enter TFP pin',\n  cityRequired: value => value ? undefined : 'Select city',\n  accountHolderNameRequired: value => value ? undefined : \"Enter account holder's name \",\n  cardNumberLength: value => value.length < 16 ? 'Enter your 16 digit card numbers' : undefined,\n  // accNumberLength: value =>\n  //   value.length < 16 ? 'Enter your 16 digit Account numbers' : undefined,\n  accNumberLength: value => value && value.length < 10 ? 'Account must be at least 10 numbers' : undefined,\n  phoneNumberLength: value => value.length < 10 ? 'Enter your 10 digit Phone numbers' : undefined,\n  vaildExpDate: value => value == '00/00' ? 'Invalid Date' : undefined,\n  noSpace: value => value && /^[ ]+|[ ]+$/i.test(value) ? \"Password can't start or end with a blank space\" : undefined,\n  accNumNoSpace: value => value && value.replace(/[^\\d]/g, '') ? 'Blank space not allowed' : undefined,\n  passwordPolicy: value => value && !/^.*(?=.{8,})(?=.*\\d)(?=.*[a-zA-Z])(?=.*[a-zA-Z])(^[a-zA-Z0-9@\\$=!:.#%]+$)/.test(value) ? 'Password must contain at least 8 characters, at least one letter and one number' : undefined,\n  alphaOnly: field => value => value && /[^a-zA-Z ]/i.test(value) ? `${field} could only consist alphabets` : undefined,\n  bankNamealphaOnly: value => value && /[^a-zA-Z ]/i.test(value) ? 'Bank name could only consist alphabets' : undefined,\n  accountHolderNamealphaOnly: value => value && /[^a-zA-Z ]/i.test(value) ? \"Account holde's name could only consist alphabets\" : undefined,\n  fullNameAlphabetOnly: value => value && /[^a-zA-Z ]/i.test(value) ? 'Name could only consist alphabets' : undefined,\n  number: value => value && isNaN(Number(value)) ? 'Must be a number' : undefined,\n  alphaNumeric: value => value && /[^a-zA-Z0-9 ]/i.test(value) ? 'Trust Partner TFP could only consist alphanumeric characters' : undefined,\n  accountNumAlphaNumeric: value => value && /[^a-zA-Z0-9 ]/i.test(value) ? 'Account Number could only consist alphanumeric characters' : undefined,\n  expiryMonth: value => value && value < 13 ? 'Expiry month must be between 01 and 12' : undefined,\n  // Normalization of fields\n  upper: value => value && value.toUpperCase(),\n  lower: value => value && value.toLowerCase(),\n  trim: value => value && value.toLowerCase(),\n  normalizeNumber: value => value && value.replace(/[^\\d]/g, ''),\n  normalizeSpecialCharacter: value => value && value.replace(/[^\\w\\s]/gi, '')\n};","map":{"version":3,"sources":["/Users/hipheckt/codes/sapio/src/common/helpers/Validation.js"],"names":["emailRequired","value","undefined","confirmEmailRequired","firstNameRequired","isEmail","test","messageRequired","passwordRequired","addressRequired","genderRequired","businessSectorRequired","phoneNumberRequired","bankNameRequired","accountNumberRequired","cardDetailRequired","oldPasswordRequired","newPasswordRequired","confirmPasswordRequired","passwordsMatch","allValues","password","emailMatch","toLowerCase","email","changePasswordsMatch","newpassword","passwordsReset","minLength","min","field","length","maxLength","max","maxLength1","termsRequired","CVVRequired","OTPRequired","cardPinRequired","cardExpiryRequired","cardNumberRequired","cardNameRequired","TFPRequired","cityRequired","accountHolderNameRequired","cardNumberLength","accNumberLength","phoneNumberLength","vaildExpDate","noSpace","accNumNoSpace","replace","passwordPolicy","alphaOnly","bankNamealphaOnly","accountHolderNamealphaOnly","fullNameAlphabetOnly","number","isNaN","Number","alphaNumeric","accountNumAlphaNumeric","expiryMonth","upper","toUpperCase","lower","trim","normalizeNumber","normalizeSpecialCharacter"],"mappings":"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","sourcesContent":["export default {\n    emailRequired: value => (value ? undefined : 'Enter email address'),\n    confirmEmailRequired: value =>\n      value ? undefined : 'Enter confirm email address',\n    firstNameRequired: value => (value ? undefined : 'Enter full name'),\n    isEmail: value =>\n      value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\n        ? 'Enter valid email address'\n        : undefined,\n  \n    messageRequired: value => (value ? undefined : 'Enter Message'),\n  \n    passwordRequired: value => (value ? undefined : 'Enter password'),\n    addressRequired: value => (value ? undefined : 'Enter address'),\n    genderRequired: value => (value ? undefined : 'Select gender'),\n    businessSectorRequired: value =>\n      value ? undefined : 'Select business sector',\n    phoneNumberRequired: value => (value ? undefined : 'Enter phone number'),\n    bankNameRequired: value => (value ? undefined : 'Enter bank name'),\n    accountNumberRequired: value => (value ? undefined : 'Enter account number'),\n    cardDetailRequired: value => (value ? undefined : 'Enter Card Detail'),\n  \n    oldPasswordRequired: value => (value ? undefined : 'Enter old password'),\n    newPasswordRequired: value => (value ? undefined : 'Enter new password'),\n  \n    confirmPasswordRequired: value =>\n      value ? undefined : 'Enter confirm password',\n  \n    passwordsMatch: (value, allValues) =>\n      value !== allValues.password\n        ? 'Mismatch password and confirm password'\n        : undefined,\n  \n    emailMatch: (value, allValues) =>\n      value.toLowerCase() !== allValues.email.toLowerCase()\n        ? 'Mismatch email and confirm email'\n        : undefined,\n  \n    changePasswordsMatch: (value, allValues) =>\n      value !== allValues.newpassword\n        ? 'Mismatch new password and confirm new password'\n        : undefined,\n  \n    passwordsReset: (value, allValues) =>\n      value !== allValues.password\n        ? 'Mismatch new and confirm password'\n        : undefined,\n  \n    minLength: (min, field) => value =>\n      value && value.length < min\n        ? `${field} must be ${min} characters long`\n        : undefined,\n  \n    maxLength: max => value =>\n      value && value.length > max\n        ? `Must be ${max} characters or less`\n        : undefined,\n  \n    maxLength1: (max, field) => value =>\n      value && value.length > max\n        ? `${field} must be ${max} characters`\n        : undefined,\n  \n    termsRequired: value =>\n      value\n        ? undefined\n        : 'Select checkbox to agree to the terms and conditions to continue',\n    CVVRequired: value => (value ? undefined : 'Enter CVV'),\n    OTPRequired: value => (value ? undefined : 'Enter OTP'),\n    cardPinRequired: value => (value ? undefined : 'Enter card pin'),\n    cardExpiryRequired: value => (value ? undefined : 'Enter card expiry'),\n  \n    cardNumberRequired: value => (value ? undefined : 'Enter card number'),\n    cardNameRequired: value => (value ? undefined : 'Enter card holder name'),\n    TFPRequired: value => (value ? undefined : 'Enter TFP pin'),\n    cityRequired: value => (value ? undefined : 'Select city'),\n    accountHolderNameRequired: value =>\n      value ? undefined : \"Enter account holder's name \",\n  \n    cardNumberLength: value =>\n      value.length < 16 ? 'Enter your 16 digit card numbers' : undefined,\n  \n    // accNumberLength: value =>\n    //   value.length < 16 ? 'Enter your 16 digit Account numbers' : undefined,\n  \n    accNumberLength: value =>\n      value && value.length < 10\n        ? 'Account must be at least 10 numbers'\n        : undefined,\n  \n    phoneNumberLength: value =>\n      value.length < 10 ? 'Enter your 10 digit Phone numbers' : undefined,\n  \n    vaildExpDate: value => (value == '00/00' ? 'Invalid Date' : undefined),\n  \n    noSpace: value =>\n      value && /^[ ]+|[ ]+$/i.test(value)\n        ? \"Password can't start or end with a blank space\"\n        : undefined,\n  \n    accNumNoSpace: value =>\n      value && value.replace(/[^\\d]/g, '')\n        ? 'Blank space not allowed'\n        : undefined,\n  \n    passwordPolicy: value =>\n      value &&\n      !/^.*(?=.{8,})(?=.*\\d)(?=.*[a-zA-Z])(?=.*[a-zA-Z])(^[a-zA-Z0-9@\\$=!:.#%]+$)/.test(\n        value\n      )\n        ? 'Password must contain at least 8 characters, at least one letter and one number'\n        : undefined,\n  \n    alphaOnly: field => value =>\n      value && /[^a-zA-Z ]/i.test(value)\n        ? `${field} could only consist alphabets`\n        : undefined,\n  \n    bankNamealphaOnly: value =>\n      value && /[^a-zA-Z ]/i.test(value)\n        ? 'Bank name could only consist alphabets'\n        : undefined,\n  \n    accountHolderNamealphaOnly: value =>\n      value && /[^a-zA-Z ]/i.test(value)\n        ? \"Account holde's name could only consist alphabets\"\n        : undefined,\n  \n    fullNameAlphabetOnly: value =>\n      value && /[^a-zA-Z ]/i.test(value)\n        ? 'Name could only consist alphabets'\n        : undefined,\n  \n    number: value =>\n      value && isNaN(Number(value)) ? 'Must be a number' : undefined,\n  \n    alphaNumeric: value =>\n      value && /[^a-zA-Z0-9 ]/i.test(value)\n        ? 'Trust Partner TFP could only consist alphanumeric characters'\n        : undefined,\n  \n    accountNumAlphaNumeric: value =>\n      value && /[^a-zA-Z0-9 ]/i.test(value)\n        ? 'Account Number could only consist alphanumeric characters'\n        : undefined,\n  \n    expiryMonth: value =>\n      value && value < 13 ? 'Expiry month must be between 01 and 12' : undefined,\n  \n    // Normalization of fields\n    upper: value => value && value.toUpperCase(),\n    lower: value => value && value.toLowerCase(),\n    trim: value => value && value.toLowerCase(),\n    normalizeNumber: value => value && value.replace(/[^\\d]/g, ''),\n    normalizeSpecialCharacter: value => value && value.replace(/[^\\w\\s]/gi, '')\n  };\n  "]},"metadata":{},"sourceType":"module"}