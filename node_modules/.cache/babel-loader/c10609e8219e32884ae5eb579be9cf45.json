{"ast":null,"code":"import Cryptr from 'cryptr';\nimport _ from 'lodash';\nimport CONSTANTS from '../helpers/Constants';\nconst cryptr = new Cryptr(CONSTANTS.CRYPTER_KEY); // Encrypt local storage data\n\nexport const encryptLSData = data => {\n  return cryptr.encrypt(data);\n}; // Decrypt local storage data\n\nexport const decryptLSData = data => {\n  return cryptr.decrypt(data);\n}; // To set local storage data\n\nexport const setLocalStorage = (key, value) => {\n  value = JSON.stringify(value);\n  const encodedData = encryptLSData(value);\n  localStorage.setItem(key, encodedData);\n}; // To get local storage data\n\nexport const getLocalStorage = key => {\n  if (key) {\n    let data = localStorage.getItem(key);\n\n    if (data) {\n      data = JSON.parse(decryptLSData(data));\n      return data;\n    }\n  }\n\n  return null;\n}; // To remove local storage key\n\nexport const removeLocalStorage = key => {\n  localStorage.removeItem(key);\n}; // To clear localstorage\n\nexport const clearLocalStorage = cb => {\n  if (getLocalStorage('remember')) {\n    var rememberme = localStorage.getItem('remember');\n    localStorage.clear();\n    if (cb) cb();\n    localStorage.setItem('remember', rememberme);\n  } else {\n    localStorage.clear();\n    if (cb) cb();\n  }\n};\nexport const formatNumber = num => {\n  if (num) return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');else return null;\n};\nexport const capitalizeFirstLetter = string => {\n  if (string) return _.startCase(_.toLower(string));else return null;\n};\nexport const clearNumber = (value = '') => {\n  return value.replace(/\\D+/g, '');\n};\nexport const formatExpirationDate = value => {\n  if (value) {\n    const clearValue = clearNumber(value);\n\n    if (clearValue.length >= 3) {\n      return `${clearValue.slice(0, 2)}/${clearValue.slice(2, 4)}`;\n    }\n\n    return clearValue;\n  }\n};\nexport const base64_encode = value => {\n  if (value) {\n    return window.btoa(value);\n  }\n\n  return null;\n};\nexport const base64_decode = value => {\n  if (value) {\n    return window.atob(value);\n  }\n\n  return null;\n};\nexport const limitCharacter = (text, count) => {\n  if (text && count) {\n    return text.slice(0, count) + (text.length > count ? '...' : '');\n  } else {\n    return false;\n  }\n};","map":{"version":3,"sources":["/Users/hipheckt/codes/sapio/src/common/helpers/Utils.js"],"names":["Cryptr","_","CONSTANTS","cryptr","CRYPTER_KEY","encryptLSData","data","encrypt","decryptLSData","decrypt","setLocalStorage","key","value","JSON","stringify","encodedData","localStorage","setItem","getLocalStorage","getItem","parse","removeLocalStorage","removeItem","clearLocalStorage","cb","rememberme","clear","formatNumber","num","toString","replace","capitalizeFirstLetter","string","startCase","toLower","clearNumber","formatExpirationDate","clearValue","length","slice","base64_encode","window","btoa","base64_decode","atob","limitCharacter","text","count"],"mappings":"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","sourcesContent":["import Cryptr from 'cryptr';\nimport _ from 'lodash';\nimport CONSTANTS from '../helpers/Constants';\n\nconst cryptr = new Cryptr(CONSTANTS.CRYPTER_KEY);\n\n// Encrypt local storage data\nexport const encryptLSData = data => {\n  return cryptr.encrypt(data);\n};\n\n// Decrypt local storage data\nexport const decryptLSData = data => {\n  return cryptr.decrypt(data);\n};\n\n// To set local storage data\nexport const setLocalStorage = (key, value) => {\n  value = JSON.stringify(value);\n  const encodedData = encryptLSData(value);\n  localStorage.setItem(key, encodedData);\n};\n\n// To get local storage data\nexport const getLocalStorage = key => {\n  if (key) {\n    let data = localStorage.getItem(key);\n    if (data) {\n      data = JSON.parse(decryptLSData(data));\n      return data;\n    }\n  }\n  return null;\n};\n\n// To remove local storage key\nexport const removeLocalStorage = key => {\n  localStorage.removeItem(key);\n};\n\n// To clear localstorage\nexport const clearLocalStorage = cb => {\n  if (getLocalStorage('remember')) {\n    var rememberme = localStorage.getItem('remember');\n    localStorage.clear();\n    if (cb) cb();\n    localStorage.setItem('remember', rememberme);\n  } else {\n    localStorage.clear();\n    if (cb) cb();\n  }\n};\n\nexport const formatNumber = num => {\n  if (num) return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n  else return null;\n};\n\nexport const capitalizeFirstLetter = string => {\n  if (string) return _.startCase(_.toLower(string));\n  else return null;\n};\n\nexport const clearNumber = (value = '') => {\n  return value.replace(/\\D+/g, '');\n};\n\nexport const formatExpirationDate = value => {\n  if (value) {\n    const clearValue = clearNumber(value);\n\n    if (clearValue.length >= 3) {\n      return `${clearValue.slice(0, 2)}/${clearValue.slice(2, 4)}`;\n    }\n    return clearValue;\n  }\n};\n\nexport const base64_encode = value => {\n  if (value) {\n    return window.btoa(value);\n  }\n  return null;\n};\n\nexport const base64_decode = value => {\n  if (value) {\n    return window.atob(value);\n  }\n  return null;\n};\n\nexport const limitCharacter = (text, count) => {\n  if (text && count) {\n    return text.slice(0, count) + (text.length > count ? '...' : '');\n  } else {\n    return false;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}