{"ast":null,"code":"var _jsxFileName = \"/Users/hipheckt/codes/sapioclub/react/src/PrivateRoute.js\";\n// This is used to determine if a user is authenticated and\n// if they are allowed to visit the page they navigated to.\n// If they are: they proceed to the page\n// If not: they are redirected to the login page.\nimport React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\n\nconst PrivateRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  // Add your own authentication on the below line.\n  const isLoggedIn = localStorage[\"appState\"] ? JSON.parse(localStorage[\"appState\"]).isLoggedIn : \"\"; // let date = 20;\n\n  let newDate = new Date();\n  let date = newDate.getDate(); // let month = newDate.getMonth() + 1;\n  // let year = newDate.getFullYear();\n\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n    render: props => isLoggedIn ? date != 24 / 11 / 2020 ? /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: {\n        pathname: '/expired',\n        state: {\n          from: props.location\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }\n    }) : /*#__PURE__*/React.createElement(Redirect, {\n      to: {\n        pathname: '/login',\n        state: {\n          from: props.location\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default PrivateRoute;","map":{"version":3,"sources":["/Users/hipheckt/codes/sapioclub/react/src/PrivateRoute.js"],"names":["React","Redirect","Route","PrivateRoute","component","Component","rest","isLoggedIn","localStorage","JSON","parse","newDate","Date","date","getDate","props","pathname","state","from","location"],"mappings":";AAAA;AACA;AAEA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,kBAAhC;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,KAAuC;AAE1D;AACA,QAAMC,UAAU,GAAGC,YAAY,CAAC,UAAD,CAAZ,GAA2BC,IAAI,CAACC,KAAL,CAAWF,YAAY,CAAC,UAAD,CAAvB,EAAqCD,UAAhE,GAA6E,EAAhG,CAH0D,CAK1D;;AAEA,MAAII,OAAO,GAAG,IAAIC,IAAJ,EAAd;AACA,MAAIC,IAAI,GAAGF,OAAO,CAACG,OAAR,EAAX,CAR0D,CAS1D;AACA;;AAEA,sBACE,oBAAC,KAAD,oBACMR,IADN;AAEE,IAAA,MAAM,EAAES,KAAK,IACXR,UAAU,GACRM,IAAI,IAAI,KAAG,EAAH,GAAM,IAAd,gBACE,oBAAC,SAAD,oBAAeE,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,gBAGE,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AAAEC,QAAAA,QAAQ,EAAE,UAAZ;AAAwBC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAEH,KAAK,CAACI;AAAd;AAA/B,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJM,gBAOR,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AAAEH,QAAAA,QAAQ,EAAE,QAAZ;AAAsBC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAEH,KAAK,CAACI;AAAd;AAA7B,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAgBD,CA5BD;;AA8BA,eAAehB,YAAf","sourcesContent":["// This is used to determine if a user is authenticated and\n// if they are allowed to visit the page they navigated to.\n\n// If they are: they proceed to the page\n// If not: they are redirected to the login page.\nimport React from 'react'\nimport { Redirect, Route } from 'react-router-dom'\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n\n  // Add your own authentication on the below line.\n  const isLoggedIn = localStorage[\"appState\"] ? JSON.parse(localStorage[\"appState\"]).isLoggedIn : \"\";\n  \n  // let date = 20;\n\n  let newDate = new Date()\n  let date = newDate.getDate();\n  // let month = newDate.getMonth() + 1;\n  // let year = newDate.getFullYear();\n\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        isLoggedIn ? (\n          date != 24/11/2020 ? (\n            <Component {...props} />\n          ) : (\n            <Redirect to={{ pathname: '/expired', state: { from: props.location } }} />\n          )\n        ) : (\n          <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\n        )\n      }\n    />\n  )\n}\n\nexport default PrivateRoute;"]},"metadata":{},"sourceType":"module"}