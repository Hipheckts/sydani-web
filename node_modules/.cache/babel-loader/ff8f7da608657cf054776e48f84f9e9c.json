{"ast":null,"code":"var _jsxFileName = \"/Users/hipheckt/codes/sapio/src/Login.js\";\nimport React, { Component } from \"react\";\nimport { Field, reduxForm, reset, change, untouch } from \"redux-form\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport * as qs from \"query-string\";\nimport { actionLogin } from \"./common/redux/actions/\";\nimport RenderField from \"./common/helpers/RenderField\";\nimport Validation from \"./common/helpers/Validation\";\nimport { setLocalStorage, removeLocalStorage, getLocalStorage, base64_decode, clearLocalStorage } from \"./common/helpers/Utils\";\nimport trustFundApiService from \"./common/api/ApiService\";\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.verifyEmail = (email, type, authcode) => {\n      if (email && type) {\n        let data = {\n          email,\n          type,\n          authcode\n        };\n\n        let _this = this; //  console.log(data);\n\n\n        trustFundApiService(\"emailVerification\", data).then(response => {\n          if (response.data.status === \"success\") {\n            _this.props.history.push(\"/login\");\n          } else {\n            _this.props.history.push(\"/login\");\n          }\n        }).catch(err => {\n          console.log(err);\n        });\n      }\n    };\n\n    this.autoLogin = data => {\n      let _this = this;\n\n      if (data && data.email && data.pass) {\n        let _data = {\n          email: data.email,\n          password: data.pass,\n          type: \"admin\"\n        };\n\n        if (data) {\n          this.props.actionLogin(_data).then(result => {\n            if (result && result.data && result.data.status === \"success\") {\n              if (data.type === \"notifications\") {\n                _this.props.history.push({\n                  pathname: \"/notifications\",\n                  state: {\n                    loanid: data.loanid,\n                    trustresponse: data.trustresponse,\n                    uid: data.uid\n                  }\n                });\n              } else if (data.type === \"trustmembers\") {\n                this.props.history.push({\n                  pathname: \"/trustmembers\",\n                  state: {\n                    trustMemberData: data\n                  }\n                });\n              }\n            }\n          }).catch(error => {\n            console.log(error);\n          });\n        }\n      }\n    };\n\n    this.adminLoginToUserAccount = data => {\n      let _this = this;\n\n      if (data && data.email && data.pass) {\n        let _data = {\n          email: data.email,\n          password: data.pass,\n          type: \"admin_login\"\n        };\n\n        if (data) {\n          this.props.actionLogin(_data).then(result => {\n            if (result && result.data && result.data.status === \"success\") {\n              _this.props.history.push({\n                pathname: \"/userdashboard\"\n              });\n            }\n          }).catch(error => {\n            console.log(error);\n          });\n        }\n      }\n    };\n\n    this.setLoginData = () => {\n      if (getLocalStorage(\"remember\")) {\n        let loginInfo = getLocalStorage(\"remember\");\n        this.props.initialize({\n          email: loginInfo.email,\n          password: loginInfo.password,\n          rememberme: true\n        });\n      }\n    };\n\n    this.handleSubmit = formValues => {\n      let data = formValues;\n\n      const _this = this;\n\n      _this.setState({\n        loader: true\n      });\n\n      this.props.actionLogin(data).then(result => {\n        if (result && result.data && result.data.status === \"success\") {\n          setLocalStorage(\"userInfo\", result.data.data);\n\n          _this.setState({\n            loader: false\n          });\n\n          if (data.rememberme === true) {\n            let loginInfo = {\n              email: data.email,\n              password: data.password\n            };\n            setLocalStorage(\"remember\", loginInfo);\n          } else {\n            removeLocalStorage(\"remember\");\n          }\n\n          if (result.data.data.u_plan_id === \"\" && result.data.data.u_plan_name === \"\") {\n            setLocalStorage(\"fromRegister\", 1);\n\n            _this.props.history.push(\"/viewplans\");\n          } else {\n            this.props.history.push(\"/dashboard\");\n          }\n        } else {\n          _this.setState({\n            loader: false\n          });\n\n          this.props.dispatch(change(\"loginForm\", \"password\", \"\"));\n          this.props.dispatch(untouch(\"loginForm\", \"password\", \"\"));\n        }\n      }).catch(error => {\n        _this.setState({\n          loader: false\n        });\n\n        console.log(error);\n      });\n    };\n\n    this.getTrustPartnerResponseOnLoan = (loanid, uid, trustresponse) => {\n      let _this = this;\n\n      if (loanid && uid) {\n        let data = {\n          trustresponse,\n          loanid,\n          uid,\n          termschecked: _this.state.termschecked\n        };\n        trustFundApiService(\"getTrustPartnerResponseOnLoan\", data).then(response => {\n          if (response.data.status === \"success\") {\n            _this.props.history.push({\n              pathname: \"/notifications\",\n              state: {\n                loanid: loanid,\n                trustresponse: trustresponse,\n                uid: uid\n              }\n            });\n          } else {\n            _this.props.history.push({\n              pathname: \"/notifications\",\n              state: {\n                loanid: loanid,\n                trustresponse: trustresponse,\n                uid: uid\n              }\n            });\n          }\n        }).catch(err => {\n          console.log(err);\n        });\n      }\n    };\n\n    this.state = {\n      termschecked: \"0\",\n      loader: false\n    };\n  }\n\n  componentDidMount() {\n    document.title = \"Log In\";\n    this.props.dispatch(reset(\"loginForm\"));\n    this.setLoginData();\n    const {\n      location\n    } = this.props;\n\n    if (location.search) {\n      const parsed = qs.parse(location.search);\n\n      if (parsed.type === \"emailverification\") {\n        if (getLocalStorage(\"userInfo\")) {\n          clearLocalStorage();\n        }\n\n        let email = parsed.email;\n        let type = parsed.type;\n        let authCode = parsed.authcode;\n        this.verifyEmail(email, type, authCode);\n      } // if accept or reject from trustmembers email\n      else if (parsed.type === \"trustmembers\") {\n          let trustMemberData = {\n            trustrequest: parsed.trustrequest,\n            byuserid: parsed.byuserid,\n            touserid: parsed.touserid,\n            type: \"trustmembers\",\n            email: base64_decode(parsed.email),\n            pass: parsed.pass\n          };\n\n          if (this.props.userData.u_id === trustMemberData.touserid) {\n            this.props.history.push({\n              pathname: \"/trustmembers\",\n              state: {\n                trustMemberData\n              }\n            });\n          } else {\n            this.autoLogin(trustMemberData);\n          }\n        } else if (parsed.type == \"admin_login\") {\n          console.log(\"Dsf\");\n          let loginData = {\n            email: parsed.email,\n            pass: parsed.password\n          };\n          console.log(loginData);\n          this.adminLoginToUserAccount(loginData);\n        } // if accept or reject from notification email\n        else {\n            let notificationData = {\n              loanid: parsed.loanid,\n              uid: parsed.uid,\n              trustresponse: parsed.trustresponse,\n              email: base64_decode(parsed.email),\n              pass: parsed.pass,\n              type: \"notifications\"\n            };\n\n            if (this.props.userData.u_id === notificationData.uid) {\n              this.props.history.push({\n                pathname: \"/notifications\",\n                state: {\n                  loanid: notificationData.loanid,\n                  trustresponse: notificationData.trustresponse,\n                  uid: notificationData.uid\n                }\n              });\n            } else {\n              this.autoLogin(notificationData);\n            }\n          }\n    } else {\n      if (this.props.userData && this.props.userData.u_id && this.props.userData.u_tfp_pin) {\n        this.props.history.push(\"/dashboard\");\n      }\n    }\n  }\n\n  render() {\n    const {\n      handleSubmit,\n      submitting\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"section\", {\n      id: \"bg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"register-view\",\n      className: \"uk-width-1-1@m uk-child-width-1-2@m\",\n      \"data-uk-grid\": true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"signin\",\n      className: \"uk-flex-middle uk-flex-center uk-flex-last@m uk-margin-remove\",\n      \"data-uk-grid\": true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }\n    }, this.state.loader ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spinner-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spinner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"\",\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 19\n      }\n    }))) : \"\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \" uk-width-4-5 uk-padding-remove-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"uk-height-1-1 loginReg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"uk-h3 theme-color\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 17\n      }\n    }, \"Account Login\"), /*#__PURE__*/React.createElement(\"form\", {\n      className: \"uk-form-stacked\",\n      id: \"loginForm\",\n      onSubmit: handleSubmit(values => this.handleSubmit({ ...values,\n        email: values && values.email ? values.email.toLowerCase() : \"\"\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"uk-margin-medium-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"uk-form-controls\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      component: RenderField,\n      className: \"uk-input\",\n      name: \"email\",\n      id: \"reg-email\",\n      type: \"text\",\n      placeholder: \"Enter your email\",\n      autoComplete: \"username\",\n      validate: [Validation.emailRequired, Validation.isEmail],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"uk-form-label\",\n      htmlFor: \"usname\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 23\n      }\n    }, \"Email\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"uk-margin-medium-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"uk-form-controls\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      component: RenderField,\n      className: \"uk-input\",\n      name: \"password\",\n      id: \"reg-password\",\n      type: \"password\",\n      placeholder: \"Enter your password\",\n      autoComplete: \"new-password\",\n      maxLength: \"40\",\n      validate: [Validation.passwordRequired, Validation.noSpace],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"uk-form-label\",\n      htmlFor: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 23\n      }\n    }, \"Password\"))), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"uk-margin-top uk-display-inline-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"rememberme\",\n      id: \"reg-rememberme\",\n      component: RenderField,\n      type: \"checkbox\",\n      className: \"uk-checkbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 21\n      }\n    }), \" \", \"Save Password\"), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"uk-margin-top uk-text-right uk-display-inline-block uk-align-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/forgot\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 21\n      }\n    }, \"Forgot password ?\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"uk-margin-medium-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"uk-button prog-button\",\n      type: \"submit\",\n      disabled: submitting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 23\n      }\n    }, \"Login\")), /*#__PURE__*/React.createElement(Link, {\n      to: \"/register\",\n      className: \"uk-link uk-link-reset uk-margin-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"uk-position-relative uk-position-z-index\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 23\n      }\n    }, \"No Account?\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"theme-color\",\n      onClick: () => this.props.history.push(\"/register\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 25\n      }\n    }, \"Click to Join Now\"))))))), /*#__PURE__*/React.createElement(Link, {\n      className: \"uk-link uk-hidden@m uk-link-reset uk-margin-right\",\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"theme-color\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 15\n      }\n    }, \"Go Home\")))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  //console.log(state);\n  const {\n    userData\n  } = state.user;\n  return {\n    userData\n  };\n};\n\nLogin = connect(mapStateToProps, {\n  actionLogin\n})(Login);\nexport default reduxForm({\n  form: \"loginForm\",\n  touchOnBlur: false,\n  destroyOnUnmount: true\n})(withRouter(Login));","map":{"version":3,"sources":["/Users/hipheckt/codes/sapio/src/Login.js"],"names":["React","Component","Field","reduxForm","reset","change","untouch","Link","withRouter","connect","qs","actionLogin","RenderField","Validation","setLocalStorage","removeLocalStorage","getLocalStorage","base64_decode","clearLocalStorage","trustFundApiService","Login","constructor","props","verifyEmail","email","type","authcode","data","_this","then","response","status","history","push","catch","err","console","log","autoLogin","pass","_data","password","result","pathname","state","loanid","trustresponse","uid","trustMemberData","error","adminLoginToUserAccount","setLoginData","loginInfo","initialize","rememberme","handleSubmit","formValues","setState","loader","u_plan_id","u_plan_name","dispatch","getTrustPartnerResponseOnLoan","termschecked","componentDidMount","document","title","location","search","parsed","parse","authCode","trustrequest","byuserid","touserid","userData","u_id","loginData","notificationData","u_tfp_pin","render","submitting","values","toLowerCase","emailRequired","isEmail","passwordRequired","noSpace","mapStateToProps","user","form","touchOnBlur","destroyOnUnmount"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Field, reduxForm, reset, change, untouch } from \"redux-form\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport * as qs from \"query-string\";\r\n\r\nimport { actionLogin } from \"./common/redux/actions/\";\r\nimport RenderField from \"./common/helpers/RenderField\";\r\nimport Validation from \"./common/helpers/Validation\";\r\nimport {\r\n  setLocalStorage,\r\n  removeLocalStorage,\r\n  getLocalStorage,\r\n  base64_decode,\r\n  clearLocalStorage,\r\n} from \"./common/helpers/Utils\";\r\nimport trustFundApiService from \"./common/api/ApiService\";\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      termschecked: \"0\",\r\n      loader: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.title = \"Log In\";\r\n    this.props.dispatch(reset(\"loginForm\"));\r\n    this.setLoginData();\r\n    const { location } = this.props;\r\n    if (location.search) {\r\n      const parsed = qs.parse(location.search);\r\n      if (parsed.type === \"emailverification\") {\r\n        if (getLocalStorage(\"userInfo\")) {\r\n          clearLocalStorage();\r\n        }\r\n\r\n        let email = parsed.email;\r\n        let type = parsed.type;\r\n        let authCode = parsed.authcode;\r\n        this.verifyEmail(email, type, authCode);\r\n      }\r\n      // if accept or reject from trustmembers email\r\n      else if (parsed.type === \"trustmembers\") {\r\n        let trustMemberData = {\r\n          trustrequest: parsed.trustrequest,\r\n          byuserid: parsed.byuserid,\r\n          touserid: parsed.touserid,\r\n          type: \"trustmembers\",\r\n          email: base64_decode(parsed.email),\r\n          pass: parsed.pass,\r\n        };\r\n        if (this.props.userData.u_id === trustMemberData.touserid) {\r\n          this.props.history.push({\r\n            pathname: \"/trustmembers\",\r\n            state: {\r\n              trustMemberData,\r\n            },\r\n          });\r\n        } else {\r\n          this.autoLogin(trustMemberData);\r\n        }\r\n      } else if (parsed.type == \"admin_login\") {\r\n        console.log(\"Dsf\");\r\n        let loginData = {\r\n          email: parsed.email,\r\n          pass: parsed.password,\r\n        };\r\n        console.log(loginData);\r\n        this.adminLoginToUserAccount(loginData);\r\n      }\r\n      // if accept or reject from notification email\r\n      else {\r\n        let notificationData = {\r\n          loanid: parsed.loanid,\r\n          uid: parsed.uid,\r\n          trustresponse: parsed.trustresponse,\r\n          email: base64_decode(parsed.email),\r\n          pass: parsed.pass,\r\n          type: \"notifications\",\r\n        };\r\n\r\n        if (this.props.userData.u_id === notificationData.uid) {\r\n          this.props.history.push({\r\n            pathname: \"/notifications\",\r\n            state: {\r\n              loanid: notificationData.loanid,\r\n              trustresponse: notificationData.trustresponse,\r\n              uid: notificationData.uid,\r\n            },\r\n          });\r\n        } else {\r\n          this.autoLogin(notificationData);\r\n        }\r\n      }\r\n    } else {\r\n      if (\r\n        this.props.userData &&\r\n        this.props.userData.u_id &&\r\n        this.props.userData.u_tfp_pin\r\n      ) {\r\n        this.props.history.push(\"/dashboard\");\r\n      }\r\n    }\r\n  }\r\n\r\n  verifyEmail = (email, type, authcode) => {\r\n    if (email && type) {\r\n      let data = {\r\n        email,\r\n        type,\r\n        authcode,\r\n      };\r\n      let _this = this;\r\n      //  console.log(data);\r\n      trustFundApiService(\"emailVerification\", data)\r\n        .then((response) => {\r\n          if (response.data.status === \"success\") {\r\n            _this.props.history.push(\"/login\");\r\n          } else {\r\n            _this.props.history.push(\"/login\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  autoLogin = (data) => {\r\n    let _this = this;\r\n    if (data && data.email && data.pass) {\r\n      let _data = {\r\n        email: data.email,\r\n        password: data.pass,\r\n        type: \"admin\",\r\n      };\r\n      if (data) {\r\n        this.props\r\n          .actionLogin(_data)\r\n          .then((result) => {\r\n            if (result && result.data && result.data.status === \"success\") {\r\n              if (data.type === \"notifications\") {\r\n                _this.props.history.push({\r\n                  pathname: \"/notifications\",\r\n                  state: {\r\n                    loanid: data.loanid,\r\n                    trustresponse: data.trustresponse,\r\n                    uid: data.uid,\r\n                  },\r\n                });\r\n              } else if (data.type === \"trustmembers\") {\r\n                this.props.history.push({\r\n                  pathname: \"/trustmembers\",\r\n                  state: {\r\n                    trustMemberData: data,\r\n                  },\r\n                });\r\n              }\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  adminLoginToUserAccount = (data) => {\r\n    let _this = this;\r\n    if (data && data.email && data.pass) {\r\n      let _data = {\r\n        email: data.email,\r\n        password: data.pass,\r\n        type: \"admin_login\",\r\n      };\r\n      if (data) {\r\n        this.props\r\n          .actionLogin(_data)\r\n          .then((result) => {\r\n            if (result && result.data && result.data.status === \"success\") {\r\n              _this.props.history.push({\r\n                pathname: \"/userdashboard\",\r\n              });\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  // if remember checkbox is checked\r\n  setLoginData = () => {\r\n    if (getLocalStorage(\"remember\")) {\r\n      let loginInfo = getLocalStorage(\"remember\");\r\n      this.props.initialize({\r\n        email: loginInfo.email,\r\n        password: loginInfo.password,\r\n        rememberme: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleSubmit = (formValues) => {\r\n    let data = formValues;\r\n    const _this = this;\r\n    _this.setState({ loader: true });\r\n    this.props\r\n      .actionLogin(data)\r\n      .then((result) => {\r\n        if (result && result.data && result.data.status === \"success\") {\r\n          setLocalStorage(\"userInfo\", result.data.data);\r\n          _this.setState({ loader: false });\r\n          if (data.rememberme === true) {\r\n            let loginInfo = {\r\n              email: data.email,\r\n              password: data.password,\r\n            };\r\n            setLocalStorage(\"remember\", loginInfo);\r\n          } else {\r\n            removeLocalStorage(\"remember\");\r\n          }\r\n          if (\r\n            result.data.data.u_plan_id === \"\" &&\r\n            result.data.data.u_plan_name === \"\"\r\n          ) {\r\n            setLocalStorage(\"fromRegister\", 1);\r\n            _this.props.history.push(\"/viewplans\");\r\n          } else {\r\n            this.props.history.push(\"/dashboard\");\r\n          }\r\n        } else {\r\n          _this.setState({ loader: false });\r\n          this.props.dispatch(change(\"loginForm\", \"password\", \"\"));\r\n          this.props.dispatch(untouch(\"loginForm\", \"password\", \"\"));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        _this.setState({ loader: false });\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  // trusted or declined loan request\r\n  getTrustPartnerResponseOnLoan = (loanid, uid, trustresponse) => {\r\n    let _this = this;\r\n    if (loanid && uid) {\r\n      let data = {\r\n        trustresponse,\r\n        loanid,\r\n        uid,\r\n        termschecked: _this.state.termschecked,\r\n      };\r\n\r\n      trustFundApiService(\"getTrustPartnerResponseOnLoan\", data)\r\n        .then((response) => {\r\n          if (response.data.status === \"success\") {\r\n            _this.props.history.push({\r\n              pathname: \"/notifications\",\r\n              state: { loanid: loanid, trustresponse: trustresponse, uid: uid },\r\n            });\r\n          } else {\r\n            _this.props.history.push({\r\n              pathname: \"/notifications\",\r\n              state: { loanid: loanid, trustresponse: trustresponse, uid: uid },\r\n            });\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { handleSubmit, submitting } = this.props;\r\n\r\n    return (\r\n      <section id=\"bg\">\r\n        <div\r\n          id=\"register-view\"\r\n          className=\"uk-width-1-1@m uk-child-width-1-2@m\"\r\n          data-uk-grid\r\n        >\r\n          <div\r\n            id=\"signin\"\r\n            className=\"uk-flex-middle uk-flex-center uk-flex-last@m uk-margin-remove\"\r\n            data-uk-grid\r\n          >\r\n            {this.state.loader ? (\r\n              <div className=\"spinner-wrapper\">\r\n                <div className=\"spinner\">\r\n                  <img src=\"\" alt=\"\" />\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <div className=\" uk-width-4-5 uk-padding-remove-left\">\r\n              <div className=\"uk-height-1-1 loginReg\">\r\n                <h2 className=\"uk-h3 theme-color\">Account Login</h2>\r\n                <form\r\n                  className=\"uk-form-stacked\"\r\n                  id=\"loginForm\"\r\n                  onSubmit={handleSubmit((values) =>\r\n                    this.handleSubmit({\r\n                      ...values,\r\n                      email:\r\n                        values && values.email\r\n                          ? values.email.toLowerCase()\r\n                          : \"\",\r\n                    })\r\n                  )}\r\n                >\r\n                  <div className=\"uk-margin-medium-top\">\r\n                    <div className=\"uk-form-controls\">\r\n                      <Field\r\n                        component={RenderField}\r\n                        className=\"uk-input\"\r\n                        name=\"email\"\r\n                        id=\"reg-email\"\r\n                        type=\"text\"\r\n                        placeholder=\"Enter your email\"\r\n                        autoComplete=\"username\"\r\n                        validate={[\r\n                          Validation.emailRequired,\r\n                          Validation.isEmail,\r\n                        ]}\r\n                      />\r\n                      <label className=\"uk-form-label\" htmlFor=\"usname\">\r\n                        Email\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"uk-margin-medium-top\">\r\n                    <div className=\"uk-form-controls\">\r\n                      <Field\r\n                        component={RenderField}\r\n                        className=\"uk-input\"\r\n                        name=\"password\"\r\n                        id=\"reg-password\"\r\n                        type=\"password\"\r\n                        placeholder=\"Enter your password\"\r\n                        autoComplete=\"new-password\"\r\n                        maxLength=\"40\"\r\n                        validate={[\r\n                          Validation.passwordRequired,\r\n                          Validation.noSpace,\r\n                        ]}\r\n                      />\r\n                      <label className=\"uk-form-label\" htmlFor=\"password\">\r\n                        Password\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                  <label className=\"uk-margin-top uk-display-inline-block\">\r\n                    <Field\r\n                      name=\"rememberme\"\r\n                      id=\"reg-rememberme\"\r\n                      component={RenderField}\r\n                      type=\"checkbox\"\r\n                      className=\"uk-checkbox\"\r\n                    />{\" \"}\r\n                    Save Password\r\n                  </label>\r\n                  <label className=\"uk-margin-top uk-text-right uk-display-inline-block uk-align-right\">\r\n                    <Link to=\"/forgot\">Forgot password ?</Link>\r\n                  </label>\r\n                  <div className=\"uk-margin-medium-top\">\r\n                    <button\r\n                      className=\"uk-button prog-button\"\r\n                      type=\"submit\"\r\n                      disabled={submitting}\r\n                    >\r\n                      <span>Login</span>\r\n                    </button>\r\n                    <Link\r\n                      to=\"/register\"\r\n                      className=\"uk-link uk-link-reset uk-margin-left\"\r\n                    >\r\n                      <span className=\"uk-position-relative uk-position-z-index\">\r\n                        No Account?{\" \"}\r\n                        <span\r\n                          className=\"theme-color\"\r\n                          onClick={() => this.props.history.push(\"/register\")}\r\n                        >\r\n                          Click to Join Now\r\n                        </span>\r\n                      </span>\r\n                    </Link>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n            <Link\r\n              className=\"uk-link uk-hidden@m uk-link-reset uk-margin-right\"\r\n              to=\"/\"\r\n            >\r\n              <br />\r\n              <span className=\"theme-color\">Go Home</span>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  //console.log(state);\r\n  const { userData } = state.user;\r\n  return { userData };\r\n};\r\n\r\nLogin = connect(mapStateToProps, { actionLogin })(Login);\r\n\r\nexport default reduxForm({\r\n  form: \"loginForm\",\r\n  touchOnBlur: false,\r\n  destroyOnUnmount: true,\r\n})(withRouter(Login));\r\n"]},"metadata":{},"sourceType":"module"}